generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique @map("email")
  password       String          @map("password")
  name           String          @map("name")
  walletAddress  String?         @unique @map("wallet_address")
  referrerId     Int?            @map("referrer_id")
  lastDailyLogin DateTime?       @map("last_daily_login")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  referrer       User?           @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals      User[]          @relation("UserReferrals")
  otpCodes       OtpCode[]
  socialAccounts SocialAccount[]
  wallets        Wallet[]

  @@map("users")
}

model OtpCode {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  email     String    @unique @map("email")
  code      String    @map("code")
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "otp_codes_user_id_fkey")
  @@map("otp_codes")
}

model SocialAccount {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  provider   String   @map("provider")
  providerId String   @map("provider_id")
  email      String?  @map("email")
  name       String?  @map("name")
  avatar     String?  @map("avatar")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId], map: "social_accounts_user_id_fkey")
  @@map("social_accounts")
}

model Wallet {
  id       Int         @id @default(autoincrement())
  userId   Int         @map("user_id")
  currency String      @map("currency") // "points" or "usdt"
  balance  Int         @default(0) @map("balance") // Amount in base units (points or cents)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]

  @@unique([userId, currency])
  @@index([userId], map: "wallets_user_id_fkey")
  @@map("wallets")
}

model WalletTransaction {
  id            Int                   @id @default(autoincrement())
  walletId      Int                   @map("wallet_id")
  type          WalletTransactionType @map("type")
  amount        Int                   @map("amount")         // Amount in base units (positive for credit, negative for debit)
  description   String?               @map("description")    // User-facing description
  internalNotes String?               @map("internal_notes") // Service attribution for audit
  referenceId   String?               @map("reference_id")   // ID of related resource
  createdAt     DateTime              @default(now()) @map("created_at")

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId], map: "wallet_transactions_wallet_id_fkey")
  @@map("wallet_transactions")
}

enum WalletTransactionType {
  CREDIT
  DEBIT
}
