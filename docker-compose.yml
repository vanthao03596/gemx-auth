version: '3.8'

services:
  # Node.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node-skeleton-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=mysql://root:password@mysql:3306/skeleton_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this
      - JWT_EXPIRES_IN=24h
      - RATE_LIMIT_WINDOW=15m
      - RATE_LIMIT_MAX=5
    depends_on:
      - mysql
      - redis
    networks:
      - app-network

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: node-skeleton-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - app
    networks:
      - app-network
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: node-skeleton-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=skeleton_db
      - MYSQL_USER=skeleton
      - MYSQL_PASSWORD=skeleton_password
    ports:
      - '3306:3306'
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: node-skeleton-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis_password
    networks:
      - app-network

  # Redis Commander (Optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: node-skeleton-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis_password
    ports:
      - '8081:8081'
    depends_on:
      - redis
    networks:
      - app-network

volumes:
  mysql_data:
  redis_data:

networks:
  app-network:
    driver: bridge